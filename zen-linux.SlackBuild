#!/bin/bash

# Anagnostakis Ioannis (rizitis@gmail.com) GR
# SlackBuild and Install script for Slackware zen kernel and Headers.
# Note: This script dont provide a binary for installation ,BUT it build AND install a zen kernel + zen headers.
#
   # All rights reserved 10/2024
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

   cd $(dirname "$0") ; CWD=$(pwd)
DATE="$(date)"
# Setup build log file
LOGFILE="$CWD/build.log"
rm $LOGFILE || true
exec > >(tee -a "$LOGFILE") 2>&1

echo "Starting build process..."
start_time=$(date +%s)
> "$CWD"/.env


VERSION=6.11.3
echo "VERSION=$VERSION" >> "$CWD"/.env
PRGNAM="zen+"
echo "PRGNAM=$PRGNAM" >> "$CWD"/.env
# If not special SRCNAM needed then we use the same name as PRGNAM.
SRCNAM=zen-kernel
echo "SRCNAM=$SRCNAM" >> "$CWD"/.env
# Download link
SRCURL=https://github.com/zen-kernel/zen-kernel.git
COMPRESS="git"
# IF you need:git checkout, else leave it empty.
GITCHEK=afade16a193faf08d100d52c254bb5c6c5605b8c

MOD=/lib/modules/"$VERSION"-"$PRGNAM"
echo "MOD=$MOD" >> "$CWD"/.env
PKG="$MOD"/build
echo "PKG=$PKG" >> "$CWD"/.env
TMP="$HOME"/slackware-zen/workdir
echo "TMP=$TMP" >> "$CWD"/.env

prepare_build() {
	rm -rf "$TMP" || true
	mkdir -p "$TMP"
	cd "$TMP" || exit
}

download_src() {
git clone --depth 1 "$SRCURL"
cd "$SRCNAM" || exit
git checkout "$GITCHEK"
}

config_build() {
cat "$CWD"/slackware-zen-config > .config
}

all_build () {
make oldconfig
make "$NUMJOBS"
make all
pushd tools/bpf/resolve_btfids
make
popd
}




# Detect the architecture if not already set
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    i386) ARCH=i586 ;;          # 32-bit Intel architecture
    i686) ARCH=i686 ;;          # 32-bit Intel architecture (optimized)
    x86_64) ARCH=x86_64 ;;      # 64-bit Intel architecture
    armv7* | armhf) ARCH=armv7 ;;  # ARMv7 (32-bit, hardware float)
    armv6* | armv5*) ARCH=armv6 ;;  # ARMv6 (32-bit)
    aarch64 | arm64) ARCH=aarch64 ;;  # ARMv8 (64-bit)
    ppc | ppc64) ARCH=ppc ;;     # PowerPC (32-bit or 64-bit)
    s390x) ARCH=s390x ;;        # IBM System Z (64-bit)
    mips*) ARCH=mips ;;         # MIPS (various variants)
    riscv64) ARCH=riscv64 ;;    # RISC-V 64-bit
    sparc64) ARCH=sparc64 ;;     # SPARC (64-bit)
    *)
      echo "Error: Unsupported architecture '$(uname -m)'. Exiting."
      exit 1
      ;;
  esac
fi

echo "Detected architecture: $ARCH"


# Check if ARCH is set (redundant here, but kept for safety)
if [ -z "$ARCH" ]; then
  echo "Error: ARCH variable is not set. Please set it to the target architecture."
  exit 1
fi

# Set compiler flags based on architecture for musl/GCC
case "$ARCH" in
  "i586")
    SLKCFLAGS="-O2 -march=i586 -mtune=i686"
    LIBDIRSUFFIX=""
    QMAKE_CFLAGS="-O2 -m32 -march=i586 -mtune=i686"
    QMAKE_CXXFLAGS="-O2 -m32 -march=i586 -mtune=i686"
    QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
    ;;

  "i686")
    SLKCFLAGS="-O2 -march=i686 -mtune=i686"
    LIBDIRSUFFIX=""
    QMAKE_CFLAGS="-O2 -m32 -march=i686 -mtune=i686"
    QMAKE_CXXFLAGS="-O2 -m32 -march=i686 -mtune=i686"
    QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
    ;;

  "x86_64")
    SLKCFLAGS="-O2 -march=x86-64 -mtune=generic -fPIC"
    LIBDIRSUFFIX="64"
    QMAKE_CFLAGS="-O2 -m64 -march=x86-64 -mtune=generic -fPIC"
    QMAKE_CXXFLAGS="-O2 -m64 -march=x86-64 -mtune=generic -fPIC"
    QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
    ;;

  "armv7")
    SLKCFLAGS="-O2 -march=armv7-a -mtune=generic -fPIC"
    LIBDIRSUFFIX=""
    QMAKE_CFLAGS="-O2 -m32 -march=armv7-a -mtune=generic -fPIC"
    QMAKE_CXXFLAGS="-O2 -m32 -march=armv7-a -mtune=generic -fPIC"
    QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
    ;;

  "armv6")
    SLKCFLAGS="-O2 -march=armv6 -mtune=generic -fPIC"
    LIBDIRSUFFIX=""
    QMAKE_CFLAGS="-O2 -m32 -march=armv6 -mtune=generic -fPIC"
    QMAKE_CXXFLAGS="-O2 -m32 -march=armv6 -mtune=generic -fPIC"
    QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
    ;;

  "aarch64")
    SLKCFLAGS="-O2 -march=armv8-a -mtune=generic -fPIC"
    LIBDIRSUFFIX="64"
    QMAKE_CFLAGS="-O2 -march=armv8-a -mtune=generic -fPIC"
    QMAKE_CXXFLAGS="-O2 -march=armv8-a -mtune=generic -fPIC"
    QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
    ;;

  "ppc")
    SLKCFLAGS="-O2 -mppc"
    LIBDIRSUFFIX=""
    QMAKE_CFLAGS="-O2 -m32 -mppc"
    QMAKE_CXXFLAGS="-O2 -m32 -mppc"
    QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
    ;;

  "ppc64")
    SLKCFLAGS="-O2 -mppc64"
    LIBDIRSUFFIX="64"
    QMAKE_CFLAGS="-O2 -m64 -mppc64"
    QMAKE_CXXFLAGS="-O2 -m64 -mppc64"
    QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
    ;;

  "s390x")
    SLKCFLAGS="-O2 -march=s390x"
    LIBDIRSUFFIX="64"
    QMAKE_CFLAGS="-O2 -m64 -march=s390x"
    QMAKE_CXXFLAGS="-O2 -m64 -march=s390x"
    QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
    ;;

  "mips")
    SLKCFLAGS="-O2 -march=mips32"
    LIBDIRSUFFIX=""
    QMAKE_CFLAGS="-O2 -m32 -march=mips32"
    QMAKE_CXXFLAGS="-O2 -m32 -march=mips32"
    QMAKE_LFLAGS="-L/usr/lib -L/usr/local/lib"
    ;;

  "riscv64")
    SLKCFLAGS="-O2 -march=rv64imac -mabi=lp64"
    LIBDIRSUFFIX="64"
    QMAKE_CFLAGS="-O2 -m64 -march=rv64imac -mabi=lp64"
    QMAKE_CXXFLAGS="-O2 -m64 -march=rv64imac -mabi=lp64"
    QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
    ;;

  "sparc64")
    SLKCFLAGS="-O2 -m64"
    LIBDIRSUFFIX="64"
    QMAKE_CFLAGS="-O2 -m64"
    QMAKE_CXXFLAGS="-O2 -m64"
    QMAKE_LFLAGS="-L/usr/lib64 -L/usr/local/lib64"
    ;;

  *)
    echo "Warning: Unsupported architecture '$ARCH'. Using generic flags."
    SLKCFLAGS="-O2"
    LIBDIRSUFFIX=""
    QMAKE_CFLAGS="-O2"
    QMAKE_CXXFLAGS="-O2"
    QMAKE_LFLAGS="-L/usr/lib"
    ;;
esac



NUMJOBS=${NUMJOBS:-"-j$(getconf _NPROCESSORS_ONLN)"}


  set -e

# Check if the script is being run as root initially
if [ "$(whoami)" = "root" ]; then
  echo "Error: This script should not start as root!"
  exit 1
fi


# Part that runs as a regular user
echo "Running as user: $(whoami)"
prepare_build
download_src
config_build
all_build


# run as root installation script.
script_path="$CWD"/zen-linux.SlackInstall
su -c "$script_path" -s /bin/bash


# Calculate and display build time
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))
echo "Build process completed in $((elapsed_time / 60)) minutes and $((elapsed_time % 60)) seconds."
